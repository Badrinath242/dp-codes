				0/1 KnapSack
------------------------------------------------------------------------------------------
int knapSack(int W, int wt[], int val[], int n) 
{ 
   //Base condition
   if(W==0||n==0)
   {
       return 0;
   }
   //choice diagram
   if(wt[n-1]<=W)
   {
       return max(val[n-1]+knapSack(W-wt[n-1],wt,val,n-1),knapSack(W,wt,val,n-1));
   }
   else if(wt[n-1]>W)
   {
       return knapSack(W,wt,val,n-1);
   }
}
-----------------------------------------------------------------------------------------
			Top Down Aprroach
int knapSack(int W, int wt[], int val[], int n) 
{ 
 int t[n+1][W+1];
 for(int i=0;i<n+1;i++)
 {
     for(int j=0;j<W+1;j++)
     {
         if(i==0||j==0)
         {
             t[i][j]=0;
         }
         else if(wt[i-1]<=j)
         {
             t[i][j]=max(val[i-1]+t[i-1][j-wt[i-1]],t[i-1][j]);
         }
         else if(wt[i-1]>j)
         {
             t[i][j]=t[i-1][j];
         }
     }
     
 }
 return t[n][W];
}
------------------------------------------------------------------------------------------
				Perfect Sum
int perfectSum(int arr[], int n, int sum)
	{
        int t[n+1][sum+1];
        int c=0;
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                if(i==0||j==0)//base condition
                {
                    t[i][j]=0;
                }
                else if(arr[i-1]<=j) //choice diagram
                {
                    t[i][j]=t[i-1]+t[i-1][j-arr[i-1]];
                }
                else if(arr[i-1]>j)
                {
                    t[i][j]=t[i-1][j];
                }
            }
        }
        return t[n][sum];
	}
---------------------------------------------------------------------------------------
				Equal partition
class Solution {
public:
    bool partsun(vector<int>&nums,int n)
    {
        int d=nums.size();
        bool t[d+1][n+1];
        for(int i=0;i<=n;i++)
            t[0][i]=false;
        for(int i=0;i<=d;i++)
            t[i][0]=true;
        for(int i=1;i<=d;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(nums[i-1]<=j)
                {
                    t[i][j]=t[i-1][j-nums[i-1]]||t[i-1][j];
                }
                else
                    t[i][j]=t[i-1][j];
            }
        }
        return t[d][n];
    }
    bool canPartition(vector<int>& nums) {
        int n=accumulate(nums.begin(),nums.end(),0);
        if(n%2==1)
            return false;
        return partsun(nums,n/2);
    }
};
---------------------------------------------------------------------------------------
					Minimum subset difference
#include<numeric>
int Solution::solve(vector<int> &A) {
    int n=A.size();
    int mi=INT_MAX;
    int k=accumulate(A.begin(),A.end(),0);
    bool t[n+1][k+1];//by taking (k+1)/2 we can optimise the solution
    for(int i=0;i<=k;i++)
        t[0][i]=false;
    for(int i=0;i<=n;i++)
        t[i][0]=true;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=k;j++)
        {
            if(A[i-1]<=j)
                t[i][j]=t[i-1][j]||t[i-1][j-A[i-1]];
            else
                t[i][j]=t[i-1][j];
        }
    }
    for(int i=0;i<=k/2;i++)
    {
        if(t[n][i]==true)
        {
            mi=min(mi,k-2*i);
        }
    }
    return mi;
    
}
--------------------------------------------------------------------------------------
					Target Sum
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        int k=accumulate(nums.begin(),nums.end(),0);
        if(S>k)
            return 0;
        int l=(k+S);
        int r;
        if(l%2==1)
        {
            return 0;
        }
        else
            r=l/2;
        int n=nums.size();
        cout<<n<<endl;
        int t[n+1][r+1];
        sort(nums.begin(),nums.end());//necessary to keep a correct count 
        for(int i=0;i<=r;i++)
            t[0][i]=0;
        for(int i=0;i<=n;i++)
            t[i][0]=pow(2,count(nums.begin(),nums.end(),0));//it means that 0 can be included or excluded so we have to make the t[i][0] to 2 power the number of zero's
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=r;j++)
            {
                if(nums[i-1]<=j)
                    t[i][j]=t[i-1][j]+t[i-1][j-nums[i-1]];
                else
                    t[i][j]=t[i-1][j];
            }
        }
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=r;j++)
            {
                cout<<t[i][j]<<" ";
            }
            cout<<endl;
        }
        return t[n][r];
    }
};
--------------------------------------------------------------------------------------------
					UNBOUNDED KNAPSACK
_______________________________________________________________________________________________
					ROD CUTTING
----------------------------------------------------------------------------------------------
#include <iostream>
using namespace std;

int main() {
	int T;
	cin>>T;
	for(int i=0;i<T;i++)
	{
	    int n;
	    cin>>n;
	    int a[n];
	    int wt[n];
	    for(int i=0;i<n;i++)
	        { 
                wt[i]=i+1;
	            cin>>a[i];
	        }
	   int t[n+1][n+1];
	   for(int i=0;i<=n;i++)
	   {
	       for(int j=0;j<=n;j++)
	       {
	           if(i==0||j==0)
	                t[i][j]=0;
	            else if(wt[i-1]<=j)
	           {
	               t[i][j]=max(a[i-1]+t[i][j-wt[i-1]],t[i-1][j]);
	           }
	           else 
	            t[i][j]=t[i-1][j];
	       }
	   }
	   cout<<t[n][n]<<endl;
	}
	return 0;
}
----------------------------------------------------------------------------------------------
					COIN CHANGE(MAX NUMBER OF WAYS)
    long long int count( int S[], int m, int n )
    {
        long long int t[m+1][n+1];
       for(int i=0;i<=n;i++)
        t[0][i]=0;
        for(int i=0;i<=m;i++)
        t[i][0]=1;
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
        {
            if(S[i-1]<=j)
                t[i][j]=t[i-1][j]+t[i][j-S[i-1]];
            else
                t[i][j]=t[i-1][j];
        }
        }
        return t[m][n];
    }
-------------------------------------------------------------------------------------------
						COIN CHANGE(MIN NUMBER OF COINS)
 int max=amount+1;
            vector<int> t;
            t.push_back(0);
            for(int i=0;i<amount;i++)
                t.push_back(max);
        for(int i=1;i<=amount;i++)
        {
            for(int j=0;j<coins.size();j++)
            {
                if(coins[j]<=i)
                {
                    t[i]=min(t[i],t[i-coins[j]]+1);
                }
            }
        }
        for(int i=0;i<t.size();(i++))
            cout<<t[i]<<" ";
        cout<<endl<<t[amount];
        return t[amount]>amount?-1:t[amount];
    }
-----------------------------------------------------------------------------------------
 int k=coins.size();
        int l=amount;
        int t[k+1][l+1];
        for(int i=0;i<=amount;i++)
            t[0][i]=INT_MAX-1;
        for(int i=0;i<=k;i++)
            t[i][0]=0;
        for(int i=1;i<=l;i++)
        {
            if(i%coins[0]==0)
                t[1][i]=i/coins[0];
            else
                t[1][i]=INT_MAX-1;
        }
        for(int i=2;i<=k;i++)
        {
            for(int j=1;j<=amount;j++)
            {
               
                if(coins[i-1]<=j)
                {
                    t[i][j]=min(t[i-1][j],t[i][j-coins[i-1]]+1);
                }
                else
                    t[i][j]=t[i-1][j];
                 
            }
        }
        for(int i=0;i<=k;i++)
        {
            for(int j=0;j<=l;j++)
            {
                cout<<t[i][j]<<" ";
            }
            cout<<endl;
        }
        return t[k][amount]!=INT_MAX-1?t[k][amount]:-1;
----------------------------------------------------------------------------------------------
				PRINTING LCS
int lcs(int x, int y, string s1, string s2){
    
    int t[x+1][y+1];
    for(int i=0;i<=x;i++)
    {
        for(int j=0;j<=y;j++)
        {
            if(i==0||j==0)
                t[i][j]=0;
            else if(s1[i-1]==s2[j-1])
                t[i][j]=1+t[i-1][j-1];
            else
                t[i][j]=max(t[i][j-1],t[i-1][j]);
        }
    }
    int i=x+1;
    int j=y+1;
    string s;
    while(i>0&&j>0)
    {
        if(s1[i-1]==s2[j-1])
        {
            s=s+s1[i-1];
            i--;
            j--;
        }
        else if(t[i-1][j]>t[i][j-1])
            i--;
        else
            j--;
    }
    reverse(s.begin(),s.end());
    cout<<s;
    return t[x][y];
    
}
--------------------------------------------------------------------------------------------
		 		LENGTH OF SHORTEST COMMON SUPERSEQUENCE
int shortestCommonSupersequence(char* X, char* Y, int m, int n) {
    int t[m+1][n+1];
    for(int i=0;i<=m;i++)
    {
        for(int j=0;j<=n;j++)
        {
            if(i==0||j==0)
                t[i][j]=0;
            else if(X[i-1]==Y[j-1])
                t[i][j]=1+t[i-1][j-1];
            else
                t[i][j]=max(t[i-1][j],t[i][j-1]);
        }
    }
    return m+n-t[m][n];
}
--------------------------------------------------------------------------------------------
				MINIMUM OPERATIONS TO CONVERT A TO B
	int minOperations(string str1, string str2) 
	{ 
	    int n=str1.length();
	    int m=str2.length();
	    int t[n+1][m+1];
	    for(int i=0;i<=n;i++)
	    {
	        for(int j=0;j<=m;j++)
	        {
	            if(i==0||j==0)
	                t[i][j]=0;
	            else if(str1[i-1]==str2[j-1])
	                t[i][j]=1+t[i-1][j-1];
	            else
	                t[i][j]=max(t[i][j-1],t[i-1][j]);
	        }
	    }
	    return n+m-2*t[n][m];
	}
----------------------------------------------------------------------------------------------
				LONGEST REPEATING SUBSEQUENCE
	int LongestRepeatingSubsequence(string s){
		    int n=s.length();
        int t[n+1][n+1];
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=n;j++)
            {
                if(i==0||j==0)
                    t[i][j]=0;
                else if(s[i-1]==s[j-1])
                {
                    if(i!=j)
                    {
                        t[i][j]=1+t[i-1][j-1];
                    }
                    else
                        t[i][j]=max(t[i-1][j],t[i][j-1]);
                }
                else
                    t[i][j]=max(t[i-1][j],t[i][j-1]);
            }
        }
int i=n;
        int j=n;
        while(i>0&&j>0)
        {
            if(t[i][j]==t[i-1][j-1]+1)
            {
                s1=s1+s[i-1];
                i--;
                j--;
            }
            else if(t[i][j]==t[i][j-1])
                j--;
            else 
                i--;
        }
        reverse(s1.begin(),s1.end());
        return s1;
    
        return t[n][n];
		}
----------------------------------------------------------------------------------------------
					M.C.M
----------------------------------------------------------------------------------------------
					1.PALINDROME PARTITIONING
int palindromicPartition(string str)
    {
      int n=str.length();
      bool p[n][n];
      for(int i=0;i<n;i++)
      for(int j=0;j<n;j++)
        p[i][j]=false;
      for(int i=0;i<n;i++)
        p[i][i]=true;
    for(int i=0;i<n-1;i++)
        {
            if(str[i]==str[i+1])
            {
                p[i][i+1]=true;
            }
        }
     for(int l=3;l<=n;l++)
     {
         for(int i=0;i<n-l+1;i++)
         {
             int j=i+l-1;
             if((str[i]==str[j])&&p[i+1][j-1])
             {
                 p[i][j]=true;
             }
         }
     }
     int c[n];
     for(int i=0;i<n;i++)
     {
         int t=INT_MAX;
         if(p[0][i]==true)
            c[i]=0;
         else
         {for(int j=0;j<i;j++)
         {
             if((p[j+1][i])&&t>c[j]+1)
                t=c[j]+1;
         }
         c[i]=t;
         }
     }
     return c[n-1];
    }};
---------------------------------------------------------------------------------
					2.MCM
int maxCoins(vector<int>& nums) {
        // nums.insert(nums.begin(),1);
        // nums.push_back(1);
        int n=nums.size();
        int t[n][n];
        for(int i=0;i<n;i++)
        {
            t[i][i]=0;
            t[0][i]=0;
        }
        for(int l=2;l<n;l++)
        {
            for(int i=1;i<n-l+1;i++)
            {
                int j=i+l-1;
                t[i][j]=INT_MAX;
                for(int k=i;k<j;k++)
                {
                    t[i][j]=min(t[i][j],t[i][k]+t[k+1][j]+nums[i-1]*nums[k]*nums[j]);
                }
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                cout<<t[i][j]<<" ";
            }
            cout<<endl;
        }
        return t[1][n-1];
    }
};
------------------------------------------------------------------------------